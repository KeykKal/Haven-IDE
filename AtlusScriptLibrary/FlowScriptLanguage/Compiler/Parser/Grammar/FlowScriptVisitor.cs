//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\..\AtlusScriptLibrary\FlowScriptLanguage\Compiler\Parser\Grammar\FlowScript.g4 by ANTLR 4.6.4

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="FlowScriptParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.4")]
[System.CLSCompliant(false)]
public interface IFlowScriptVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>assignmentExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentExpression([NotNull] FlowScriptParser.AssignmentExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>additionExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditionExpression([NotNull] FlowScriptParser.AdditionExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalAndExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAndExpression([NotNull] FlowScriptParser.LogicalAndExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>callExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCallExpression([NotNull] FlowScriptParser.CallExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>primaryExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimaryExpression([NotNull] FlowScriptParser.PrimaryExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>unaryPostfixExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPostfixExpression([NotNull] FlowScriptParser.UnaryPostfixExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOrExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOrExpression([NotNull] FlowScriptParser.LogicalOrExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>equalityExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpression([NotNull] FlowScriptParser.EqualityExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>initializerListExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInitializerListExpression([NotNull] FlowScriptParser.InitializerListExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>subscriptExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSubscriptExpression([NotNull] FlowScriptParser.SubscriptExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>castExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCastExpression([NotNull] FlowScriptParser.CastExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>relationalExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpression([NotNull] FlowScriptParser.RelationalExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>nullExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullExpression([NotNull] FlowScriptParser.NullExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>compoundExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundExpression([NotNull] FlowScriptParser.CompoundExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>memberAccessExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccessExpression([NotNull] FlowScriptParser.MemberAccessExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>unaryPrefixExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryPrefixExpression([NotNull] FlowScriptParser.UnaryPrefixExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>multiplicationExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicationExpression([NotNull] FlowScriptParser.MultiplicationExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] FlowScriptParser.IdentifierExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="FlowScriptParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] FlowScriptParser.ConstantExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.compilationUnit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompilationUnit([NotNull] FlowScriptParser.CompilationUnitContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitImportStatement([NotNull] FlowScriptParser.ImportStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] FlowScriptParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.nullStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNullStatement([NotNull] FlowScriptParser.NullStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.compoundStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundStatement([NotNull] FlowScriptParser.CompoundStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.declarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclarationStatement([NotNull] FlowScriptParser.DeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.functionDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDeclarationStatement([NotNull] FlowScriptParser.FunctionDeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.procedureDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProcedureDeclarationStatement([NotNull] FlowScriptParser.ProcedureDeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.variableDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclarationStatement([NotNull] FlowScriptParser.VariableDeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.arraySignifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArraySignifier([NotNull] FlowScriptParser.ArraySignifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.enumTypeDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumTypeDeclarationStatement([NotNull] FlowScriptParser.EnumTypeDeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.enumValueDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumValueDeclaration([NotNull] FlowScriptParser.EnumValueDeclarationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.enumValueList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumValueList([NotNull] FlowScriptParser.EnumValueListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.labelDeclarationStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLabelDeclarationStatement([NotNull] FlowScriptParser.LabelDeclarationStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.variableModifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableModifier([NotNull] FlowScriptParser.VariableModifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.parameterList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameterList([NotNull] FlowScriptParser.ParameterListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.parameter"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameter([NotNull] FlowScriptParser.ParameterContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] FlowScriptParser.ArgumentListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] FlowScriptParser.ArgumentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] FlowScriptParser.ExpressionListContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] FlowScriptParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.primary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimary([NotNull] FlowScriptParser.PrimaryContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] FlowScriptParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] FlowScriptParser.IfStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] FlowScriptParser.ForStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] FlowScriptParser.WhileStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.breakStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBreakStatement([NotNull] FlowScriptParser.BreakStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.continueStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitContinueStatement([NotNull] FlowScriptParser.ContinueStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] FlowScriptParser.ReturnStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.gotoStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGotoStatement([NotNull] FlowScriptParser.GotoStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.switchStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchStatement([NotNull] FlowScriptParser.SwitchStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="FlowScriptParser.switchLabel"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSwitchLabel([NotNull] FlowScriptParser.SwitchLabelContext context);
}
} // namespace AtlusScriptLibrary.FlowScriptLanguage.Compiler.Parser.Grammar
